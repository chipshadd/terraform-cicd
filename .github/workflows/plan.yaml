name: Terraform Plan

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      ## Install credentials as needed for your backend
      # - uses: google-github-actions/auth@v2
      #   with:
      #     credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Setup Terraform environment
        uses: ./.github/actions/tf_env/

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -input=false -no-color

      - name: Filter out terraform changes only
        run: terraform show -json tfplan | jq '.resource_changes' > tfplan_changes.json

      - uses: actions/github-script@v7
        name: Update Pull Request
        env: 
          PR_BODY: ${{ steps.plan.outputs.stdout }}
        with:
          script: |
            // This script will update the PR body with the plan output
            const PR_BODY = process.env.PR_BODY
            github.rest.pulls.update({
              pull_number: context.payload.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `\`terraform plan\` output:

              \`\`\`terraform
              ${PR_BODY}
              \`\`\`
              `
            })

      - run: npm install md5
      - uses: actions/github-script@v7
        name: Log plan md5sum
        with:
          script: |
            const fs = require('fs')
            const md5 = require('md5')
            const plan = fs.readFileSync('tfplan_changes.json')
            const md5sum = md5(plan)
            const comment_string = 'MD5SUM of terraform plan: '
            const hash_body = `${comment_string} \`${md5sum}\` `
            async function searchCommentsForString(owner, repo, issueNumber, searchString) {
              try {
                // Fetch all comments from the issue using pagination
                const comments = await github.paginate(github.rest.issues.listComments, {
                  owner,
                  repo,
                  issue_number: issueNumber,
                });
            
                // Loop through each comment and search for the specified string
                const existingComment = comments.find(
                    (c) => c.body.includes(comment_string)
                  )
                if (existingComment) {
                  github.rest.issues.updateComment({
                    comment_id: existingComment.id,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: hash_body,
                  })
                } else {
                  github.rest.issues.createComment({
                    issue_number: context.payload.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: hash_body,
                  })
              }
              } catch (error) {
                console.error("Error fetching comments:", error);
              }
            }
            searchCommentsForString(context.repo.owner, context.repo.repo, context.payload.number, comment_string);
